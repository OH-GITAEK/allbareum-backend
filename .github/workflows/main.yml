name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Copy secret
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE }}
          DIR: ./src/main/resources
          APPLICATION_FILE_NAME: application.yml
        run: |
          mkdir -p $DIR  # Ensure the directory exists
          touch $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      - name: Build Docker image
        run: docker build -t myapp:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image
        run: |
          docker tag myapp:latest ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p /home/ec2-user/app
            cd /home/ec2-user/app
            
            # Clone the repository if it's not already present
            if [ ! -d ".git" ]; then
              git clone https://github.com/OH-GITAEK/allbareum-backend.git .
            else
              git pull origin main
            fi
            
            # Stop existing Docker containers if any
            docker-compose down || true
            
            # Export environment variables
            export SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            export SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            export SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}

            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
            
            # Start the application with Docker Compose
            docker-compose up -d --build

