name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Copy secret
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE }}
          DIR: ./src/main/resources
          APPLICATION_FILE_NAME: application.yml
        run: |
          mkdir -p $DIR
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME

      - name: Copy secret test code
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_TEST }}
          DIR: ./src/test/resources
          APPLICATION_FILE_NAME: application.yml
        run: |
          mkdir -p $DIR
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Docker image
        run: docker build -t myapp:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image
        run: |
          docker tag myapp:latest ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            cd ~/Speech-Correction-ML-Server
            git reset --hard HEAD
            git pull origin main

            if [ ! -f docker-compose.yml ]; then
              echo "${{ secrets.COMPOSE_FILE_CONTENT }}" | tr -d '\r' > docker-compose.yml
            fi

            sudo docker-compose down || true
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest || true
            sudo docker-compose up -d
